version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "f118c35e-0a0e-4b04-9e0c-3d2d8b7afb5a"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-<< pipeline.parameters.workflow-id >>
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    steps:
      - restore_cache:
          key: backend-build
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi    

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Build Back-end 
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules,backend/package-lock.json]
          key: backend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist/
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend vulnerability
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend vulnerability
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and gzip
          command: | 
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags Name=backend-${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags Name=frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints:
            - "64:ce:5f:bb:fc:c2:4a:1a:53:08:e0:47:f0:80:4d:1f"
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache tar gzip
            apk add --update ansible
            apk add --update curl
            apk add --update jq
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # Your code here
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Install AWS cli for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment 
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          key: backend-build
      - run:
          name: Run migrations
          command: |
            cd ./backend
            npm run migrations > migration.log
            cat migration.log
            migration_succesful=$(cat migration.log | grep -c "has been executed successfully")
            if [ $migration_succesful > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: << pipeline.parameters.memstash-token >>" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
      - destroy-environment 

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Moves cache to current working directory
          command: |
            cp -r /home/circleci/* ~/

      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            # Get second line from inventory where the backend ip 
            export BACKEND_IP=$(awk "NR==2" ~/project/.circleci/ansible/inventory.txt)
            echo "Back end ip is ${BACKEND_IP}"
            echo 'export API_URL="http://${BACKEND_IP}:3030"' >> $BASH_ENV
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            export BACKEND_IP=$(awk "NR==2" ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL ${API_URL}"
            cd ./frontend
            npm run build
            cd ./dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}"/ --delete
      - revert-migrations
      - destroy-environment
       
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["64:ce:5f:bb:fc:c2:4a:1a:53:08:e0:47:f0:80:4d:1f"]
      - restore_cache:
          key: backend-build
      #cache is left in /home/circleci/ this step copies folders to home directory
      - run:
          name: Moves cache to current working directory
          command: |
            cp -r /home/circleci/* ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --no-cache tar gzip
            apk add --update ansible
            apk add --update curl
            apk add --update jq
      - attach_workspace:
          at: ~/
      - run:
          name: Compress Node Modules folder for deployment
          command:  |
            cd ~/project/backend/
            tar -cvzf node_modules.tar.gz ./node_modules
      - run:
          name: Deploy Backend
          no_output_timeout: 30m
          command: |
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
            apk add --update jq
            apk add  --no-cache \
                        python3 \
                        py3-pip \
                    && pip3 install --upgrade pip \
                    && pip3 install \
                        awscli \
                    && rm -rf /var/cache/apk/*
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
              # your code here
              export BACKEND_IP=$(awk "NR==2" ~/project/.circleci/ansible/inventory.txt)
              export API_URL="http://${BACKEND_IP}:3030/api/status"
              echo "Api URL ${API_URL}"
              if (curl -s ${API_URL} | grep ok); # test if backend is running should return json with status ok
              then
               return 0 
              else
               return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.website-us-east-1.amazonaws.com/#/employees"            
            echo "Front end URL ${URL}"
            if (curl -s ${URL} | grep Welcome);
            then
              return 1
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: ["main"]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]